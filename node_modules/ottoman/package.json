{
  "_from": "ottoman@^1.0.5",
  "_id": "ottoman@1.0.5",
  "_inBundle": false,
  "_integrity": "sha512-clWLUwHJC1Ma63Ha6r7dyg2NSczfSmS/AcGF2vM2zvNwAa0gN/1sHGXVl/beo4TP6vvvQWk3uN4y1QProdfZKA==",
  "_location": "/ottoman",
  "_phantomChildren": {
    "aws-sign2": "0.7.0",
    "aws4": "1.8.0",
    "buffer-alloc": "1.2.0",
    "caseless": "0.12.0",
    "chownr": "1.1.2",
    "co": "4.6.0",
    "combined-stream": "1.0.8",
    "decompress-response": "3.3.0",
    "detect-libc": "1.0.3",
    "end-of-stream": "1.4.1",
    "extend": "3.0.2",
    "fast-json-stable-stringify": "2.0.0",
    "forever-agent": "0.6.1",
    "form-data": "2.3.3",
    "fs-constants": "1.0.0",
    "github-from-package": "0.0.0",
    "har-schema": "2.0.0",
    "hawk": "6.0.2",
    "http-signature": "1.2.0",
    "is-typedarray": "1.0.0",
    "isstream": "0.1.2",
    "json-stringify-safe": "5.0.1",
    "mime-types": "2.1.24",
    "minimist": "1.2.0",
    "mkdirp": "0.5.1",
    "node-abi": "2.11.0",
    "noop-logger": "0.1.1",
    "npmlog": "4.1.2",
    "once": "1.4.0",
    "os-homedir": "1.0.2",
    "performance-now": "2.1.0",
    "rc": "1.2.8",
    "readable-stream": "2.3.6",
    "safe-buffer": "5.1.2",
    "simple-concat": "1.0.0",
    "stringstream": "0.0.6",
    "to-buffer": "1.1.1",
    "tunnel-agent": "0.6.0",
    "which-pm-runs": "1.0.0",
    "xtend": "4.0.2"
  },
  "_requested": {
    "escapedName": "ottoman",
    "fetchSpec": "^1.0.5",
    "name": "ottoman",
    "raw": "ottoman@^1.0.5",
    "rawSpec": "^1.0.5",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/ottoman/-/ottoman-1.0.5.tgz",
  "_shasum": "47f703c3cc989bddf43d55911ddd3cb1c13135cd",
  "_shrinkwrap": null,
  "_spec": "ottoman@^1.0.5",
  "_where": "C:\\Users\\amg\\Documents\\FENDY\\PROJECT\\jpp-ol",
  "bugs": {
    "url": "https://github.com/couchbaselabs/node-ottoman/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bluebird": "^3.4.1",
    "couchbase": "~2.4.1",
    "jsonpath": "~0.2.2",
    "lodash": "^4.15.0",
    "lodash-deep": "^2.0.0",
    "uuid": "~2.0.1"
  },
  "deprecated": false,
  "description": "ODM for Couchbase Node.js driver.",
  "devDependencies": {
    "chai": "~3.3.0",
    "eslint": "^2.9.0",
    "ink-docstrap": "git+https://github.com/brett19/docstrap.git#master",
    "istanbul": "~0.3.21",
    "jsdoc": "~3.3.0-alpha9",
    "mocha": "~2.3.3"
  },
  "homepage": "https://github.com/couchbaselabs/node-ottoman#readme",
  "keywords": [
    "couchbase",
    "document",
    "json",
    "nosql",
    "odm"
  ],
  "license": "Apache2",
  "main": "./lib/ottoman",
  "name": "ottoman",
  "optionalDependencies": {
    "couchbase": "~2.4.1"
  },
  "readme": "# Ottoman.js (Node.js ODM for Couchbase)\n\nOttoman is a ODM built for Couchbase and Node.js.  It is designed to remove all\nof the boilerplate necessary to build Node.js apps with Couchbase.\n\n[![Build Status](https://api.travis-ci.org/couchbaselabs/node-ottoman.png)](https://travis-ci.org/couchbaselabs/node-ottoman)\n\n\n## Useful Links\n\nSource - [http://github.com/couchbaselabs/node-ottoman](http://github.com/couchbaselabs/node-ottoman)\n\nDocumentation - [http://ottomanjs.com/](http://ottomanjs.com/)\n\nBuild Your First Application - [/docs/first-app.md](https://github.com/couchbaselabs/node-ottoman/blob/master/docs/first-app.md)\n\nCouchbase Node.js Community - [http://couchbase.com/communities/nodejs](http://couchbase.com/communities/nodejs)\n\n## Why Use Ottoman\n\nAn ODM allows developers to:\n\n - Work natively with JavaScript Objects.\n - Rapidly prototype and define your data model together with their relationships.\n - Let someone else handle the heavy lifting and tedious tasks.\n - Support many different data-types, including several which come predefined with Ottoman in addition to support for custom data-types.\n - Define your validation logic with the models it applies to.\n - Model your data for embedding objects or references and keep those relationships crisp.\n - Provide support for generic finds.\n - Support for multiple indexing strategies natively and automatically.\n - Control and enforce your data model from within your application.\n - Programmatically define object methods that map to the data model.\n\n\n## Getting Started\n\n### Installing\n\nOttoman is published to npm, to install it in the project, run:\n```\nnpm install ottoman\n```\n\n\n### Introduction\n\nSet up your Ottoman instance with a connection to Couchbase.\n```javascript\nvar ottoman = require('ottoman');\nvar couchbase = require('couchbase');\nvar cluster = new couchbase.Cluster('couchbase://127.0.0.1');\nottoman.bucket = cluster.openBucket('default');\n```\n\nLet's say we want to track all of the furniture in our store.  Let's create a model to represent this furniture.\n```javascript\nvar Furniture = ottoman.model('Furniture', {\n  name: 'string'\n});\n```\n\nHow about we create our first furniture item.\n```javascript\nvar couch = new Furniture({name:'Couch'});\nconsole.log(couch.name); // 'Couch'\n```\n\nWe can also add methods directly to our models.\n```javascript\nFurniture.prototype.dance = function() {\n  console.log('I am furniture, I do not dance.');\n};\n```\n\nOur furniture now can take an action!\n```javascript\nvar table = new Furniture({name:'Table'});\ntable.dance();\n```\n\nBut we haven't actually saved anything to Couchbase yet.  Let's do that:\n```javascript\ntable.save(function(err) {\n  if (err) return console.error(err);\n  table.dance();\n});\n```\n\nNow that we've saved our table to the database, we need to be able to retrieve it.  Let's revise our model to add an index on the name!\n```javascript\nvar Furniture = ottoman.model('Furniture', {\n  name: 'string'\n}, {\n  index: {\n    findByName: {\n      by: 'name'\n    }\n  }\n});\n```\n\nNow we need to ensure that this index is available on the server for searching:\n```javascript\nottoman.ensureIndices(function(err) {\n  if (err) return console.error(err);\n});\n```\n\nAnd finally we can search for our furniture by name:\n```javascript\nFurniture.findByName('table', function(err, tables) {\n  if (err) return console.error(err);\n  console.log(tables);\n})\n```\n\n#### Nice Job!\nWe've now created our first model, gave it some methods, saved it to Couchbase and then retrieved it.\n\n#### What Next?\n\nNow that you've successfully built your first models, why not give our\nfull application tutorial a try?\n\n[Build Your First Application](https://github.com/couchbaselabs/node-ottoman/blob/master/docs/first-app.md)\n\n### Schemas\n\nSchemas define the layout of our stored data objects.  They contain a list of properties for the document. This can be any JSON representable data.\n\nYou can store simple types:\n```javascript\nottoman.model('User', {\n    who: 'string',\n    howmany: 'number',\n    when: 'Date'\n});\n```\n\nOttoman supports a number of standard types:\n\n- `string` - A string value.\n- `number` - A floating point value.\n- `integer` - An integer number.\n- `boolean` - A boolean value.\n- `Date` - A date value.\n- `Mixed` - Any valid Ottoman type, both models and built-in types.\n\nThese simple types can have default values specified or default value generators:\n```javascript\nottoman.model('User', {\n  title: {type: 'string', default: 'No Title'},\n  when: {type: 'Date', default: Date.now},\n  rander: {type: 'number', default: function(){ return Math.random(); }}\n});\n```\n\nWe can also have arrays:\n```javascript\nottoman.model('User', {\n  name: 'string',\n  roles: ['string']\n});\n```\n\nAnd groups:\n```javascript\nottoman.model('User', {\n  name: {\n    first: 'string',\n    last: 'string',\n    full: 'string'\n  }\n});\n```\n\nAnd arrays of groups:\n```javascript\nottoman.model('User', {\n  name: 'string',\n  roles: [{\n    type: 'string',\n    permissions: ['string']\n  }]\n});\n```\n\nYou can also define validator functions for model fields:\n```javascript\nfunction PhoneValidator(val) {\n  var phoneno = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n  if (val && !val.match(phoneno)) {\n    throw new Error('Phone number is invalid.');\n  }\n}\n\nottoman.model('User', {\n  name: 'string',\n  phone: { type:'string', validator:PhoneValidator },\n});\n```\n\n### Model References\n\nIn addition to supporting groups of properties, models also support referencing whole other documents.  Through these references we are able to store related but not necessarily dependent data.\n\nExample reference relationship:\n```javascript\nvar Account = ottoman.model('Account', {\n  email: 'string',\n  name: 'string'\n});\nottoman.model('User', {\n  username: 'string',\n  account: Account\n});\n```\n\nAccessing the data of a referenced document is as simple as requesting the parent document; referenced documents will be loaded by default.\n\nExample of creating a referenced document:\n```javascript\nvar myAccount = new Account({\n  email: 'burtteh@fakemail.com',\n  name: 'Brett Lawson'\n});\nvar myUser = new User({\n  username: 'brett19',\n  account: myAccount;\n});\nmyUser.save(function(err) {\n  if (err) throw err;\n\n  console.log('Documents Saved!');\n});\n```\n\nExample of accessing the referenced document:\n```javascript\nUser.find({username: 'brett19'}, function(err, myUser) {\n  if (err) throw err;\n\n  console.log('My Email:', myUser.account.email);\n  // My Email: burtteh@fakemail.com\n});\n```\n\n\n### Indices\n\nYou can specify numerous indices on a model.  There are multiple different kinds of indices, each with it's own benefits and restrictions.\n\nTo specify indices on a model, pass a second \"options\" object to the model function, with an index key:\n```javascript\nottoman.model('User', {\n  email: 'string',\n  name: {\n    first: 'string',\n    last: 'string',\n    full: 'string'\n  }\n}, {\n  index: {\n    findByEmail: {\n      by: 'email',\n      type: 'refdoc'\n    },\n    findByFirstName: {\n      by: 'name.first',\n      type: 'view'\n    },\n    findByLastName: {\n      by: 'name.last',\n      type: 'n1ql'\n    }\n  }\n});\n```\n\nIn order for indices to be created on the server, you must call the `ensureIndices` method.  This method will internally generate a list of indexes which will be used and the most optimal configuration for them and build any which are missing on the server.  This must be called after all models are defined, and it is a good idea to only call this when needed rather than any time your server is started.\n\n```javascript\nvar ottoman = require('ottoman');\nvar models = require('./all_my_models');\nottoman.ensureIndices(function(err) {\n  if (err) {\n    console.log('failed to created necessary indices', err);\n    return;\n  }\n\n  console.log('ottoman indices are ready for use!');\n});\n```\n\n#### Index Types\n\nBelow are some quick notes on the types of indices available, and their pros and cons.  For a more in-depth discussion, consider\nreading [Couchbasics: How Functional and Performance Needs Determine Data Access in Couchbase](http://blog.couchbase.com/2015/october/determine-data-access-in-couchbase)\n\n##### `refdoc`\nThese indices are the most performant, but the least flexible.  They allow only a single document to occupy any particular value and do direct key-value lookups using a referential document to identify a matching document in Couchbase.\n\nIn short, if you need to look up a document by a single value of a single attribute quickly (e.g. key lookups), this is the way to go.  But you cannot combine multiple refdoc indexes to speed up finding\nsomething like \"all customers with first name 'John' last name 'Smith'\".\n\n##### `view`\nThese indices are the default and use map-reduce views.  This type of index is always available once `ensureIndices` is called and will work with any Couchbase Server version.\n\nBecause views use map-reduce, certain types of queries can be faster as the query can be parallelized over all nodes in the cluster, with each node\nreturning only partial results.  One of the cons of views is that they are eventually consistent by default, and incur a performance\npenalty if you want consistency in the result.\n\n##### `n1ql`\nThese indices utilize the new SQL-like query language available in Couchbase Server 4.0.0.  These indices are more performant than views in many cases and are significantly more flexible, allowing even un-indexed searches.\n\nN1QL indexes in Ottoman use [Couchbase GSIs](http://developer.couchbase.com/documentation/server/current/indexes/gsi-for-n1ql.html).  If you need flexibility of query and\nspeed, this is the way to go.\n\n### Queries\n\nQueries allow you to perform searches among your models.  For instance allowing you to query all of the posts published by a particular user.\n\nUser/Post example:\n```javascript\nottoman.model('Post', {\n  user: {ref:'User'},\n  title: 'string',\n  body: 'string'\n});\n\nottoman.model('User', {\n  name: 'string'\n}, {\n  queries: {\n    myPosts: {\n      of: 'Post',\n      by: 'user'\n    }\n  }\n});\n```\n\n### Finding models via N1QL Queries\n\nAll models also expose a `find` method that can locate model instances by any number of criteria, and that also support pagination.\n\nThis method is very useful for finding model instances under any arbitrary criteria; however keep in mind that you may wish to put\nN1QL indexes on fields that would be very often a part of these queries, to improve lookup performance, and prevent Couchbase\nfrom having to scan most or all documents in the bucket in order to find the results.\n\nAs you can see in the example below, you can even optionally specify pagination (limit/skip) and adjust the consistency of the query executed on Couchbase.\n\n```javascript\nvar filters = { \n  lastName: 'Smith',\n  state: 'VA'\n};\n\nvar options = {\n  limit: 10,\n  skip: 10,\n  consistency: ottoman.Consistency.LOCAL\n};\n\nCustomer.find(filters, options,  \n  function(err, items) {\n    if (err) throw err;\n\n    console.log('Page 2 of Smiths of Virginia: ', JSON.stringify(items));\n  });\n```\n\n\n## License\n\nCopyright 2013 Couchbase Inc.\n\nLicensed under the Apache License, Version 2.0.\n\nSee [the Apache 2.0 license](http://www.apache.org/licenses/LICENSE-2.0).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/couchbaselabs/node-ottoman.git"
  },
  "scripts": {
    "test": "eslint ./lib && istanbul cover ./node_modules/mocha/bin/_mocha -- test/*.test.js"
  },
  "version": "1.0.5"
}
